# Identify 2-3 changes that can be made to our environment to prevent an ssh brute force attack from the internet.
The SSH ports of both the 2 EC2 instances should be closed for "wide open" Internet access via editing their EC2 Security Groups where the access can be limited to specific IP addresses / CIDR ranges, or to specific Security Groups.

Both the EC2 instances should be placed inside Private Subnet(s) and be accessible only indirectly, via the Application Load Balancer.

Finally the EC2 instances should be configured to not allow password-based SSH access.



# Neither instance should have had access to the secret recipes bucket, in the even that instance API credentials were compromised how could we have prevented access to sensitive data.
Assuming that the EC2 instance is still accessible via API credentials, it could be limited (via its Security Group) to be accessed only from specific IP addresses / CIDR ranges, only via specific protocols (TCP, UDP) on the same 5000 port.

Additionally, the S3 buckets could be fully encrypted.

Even more, the S3 buckets could be configured to allow only Reads (GET Requests) and the Web app could be programmed to return the results only via so-called pre-signed URLs. 
In this scenario, the User should first sign-in with a 3rd party Authentication provider which will incorporate an auth token in his Request sent to the Web app server.
The Web app server would check the validity of this auth token with the 3rd party Authentication provider, and if it's OK, it will send a GET Request to the S3 Bucket asking for the URL of that S3 object.
Finally the Web app server would create a Response with a so-called pre-signed URL containing the URL for the requested S3 object.
Only then the User will get this pre-signed URL as a Response from the Web App, via which the Secret Recipes would be available for download from the S3 bucket - only from this authenticated User. 
